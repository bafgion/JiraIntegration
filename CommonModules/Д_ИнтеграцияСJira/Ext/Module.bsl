Процедура ПриСозданииНаСервере(ЭтотОбъект) Экспорт
	
	Если НЕ УправлениеДоступом.ЕстьРоль("Д_РаботаСJira") Тогда
		Возврат;
	КонецЕсли;	
		
	Форма = ЭтотОбъект.ЭтаФорма;
	
	ПодменюКнопокФормы = Форма.Элементы.Добавить("ФормаМенюИнтеграцияJira", Тип("ГруппаФормы"), Форма.Элементы.ФормаКоманднаяПанель);
	ПодменюКнопокФормы.Вид = ВидГруппыФормы.Подменю;
	ПодменюКнопокФормы.Заголовок = "Интеграция Jira";
	ПодменюКнопокФормы.Картинка = БиблиотекаКартинок.Д_КартинкаJira;
	
	// Команды
	КомандаСоздатьШаблон = Форма.Команды.Добавить("Подключаемый_СоздатьШаблонИнтеграцииJira");
	КомандаСоздатьШаблон.Действие = "Подключаемый_ИнтеграцияJiraВыполнитьКоманду";
	
	КомандаНастроитьВыполнение = Форма.Команды.Добавить("Подключаемый_НастроитьВыполнениеЗапросов");
	КомандаНастроитьВыполнение.Действие = "Подключаемый_ИнтеграцияJiraВыполнитьКоманду";
	
	КомандаОткрытьСписокШаблонов = Форма.Команды.Добавить("Подключаемый_ОткрытьСписокШаблонов");
	КомандаОткрытьСписокШаблонов.Действие = "Подключаемый_ИнтеграцияJiraВыполнитьКоманду";
	
	КнопкаСоздатьШаблон = Форма.Элементы.Добавить("СоздатьШаблонИнтеграции", Тип("КнопкаФормы"), Форма.Элементы.ФормаМенюИнтеграцияJira);
	КнопкаСоздатьШаблон.Заголовок = "Создать шаблон интеграции";
	КнопкаСоздатьШаблон.ИмяКоманды = "Подключаемый_СоздатьШаблонИнтеграцииJira"; 
	
	// Кнопки
	КнопкаНастроитьВыполнение = Форма.Элементы.Добавить("НастроитьПорядок", Тип("КнопкаФормы"), Форма.Элементы.ФормаМенюИнтеграцияJira);
	КнопкаНастроитьВыполнение.Заголовок = "Настроить выполнение запросов";
	КнопкаНастроитьВыполнение.ИмяКоманды = "Подключаемый_НастроитьВыполнениеЗапросов";
	
	КнопкаОткрытьСписокШаблонов = Форма.Элементы.Добавить("ОткрытьСписокШаблонов", Тип("КнопкаФормы"), Форма.Элементы.ФормаМенюИнтеграцияJira);
	КнопкаОткрытьСписокШаблонов.Заголовок = "Открыть список шаблонов";
	КнопкаОткрытьСписокШаблонов.ИмяКоманды = "Подключаемый_ОткрытьСписокШаблонов";
	
КонецПроцедуры

Процедура ПослеЗаписиНаСервере(ЭтотОбъект) Экспорт
	
	ИдентификаторМетода = Перечисления.Д_ИдентификаторМетода.ПослеЗаписиНаСервере;
	ОбработкаЗапросов(ЭтотОбъект.Объект, ИдентификаторМетода);
	
КонецПроцедуры

Процедура ОбработкаЗапросов(Объект, ИдентификаторМетода)
	
	ОбъектСсылка = Объект.Ссылка;
	ТаблицаЗапросовПоОбъекту = НазначенныеТипыЗапросовПоОбъекту(ОбъектСсылка, ИдентификаторМетода);
	
	ТаблицаДанныхЗапросов = ИнициализацияТаблицы();
	
	Для Каждого СтрокаТаблицыЗапросов Из ТаблицаЗапросовПоОбъекту Цикл
		
		ТаблицаСопоставленныхДанных = ПолучитьСопоставленныеПараметры(СтрокаТаблицыЗапросов.Запрос);
		ШаблонЗапроса = ПолучитьЗапросДляОбъекта(СтрокаТаблицыЗапросов.Запрос);
		СопоставитьПоляЗапроса(ШаблонЗапроса, ТаблицаСопоставленныхДанных);
		СтруктураДанныхПолей = ПолучитьСтруктуруДанных(ТаблицаСопоставленныхДанных); 
		//                                                                                
		СтруктураЗаполненияТаблицы = Новый Структура("Идентификатор,ТипЗапроса,ТекстЗапроса,
													|СтруктураДанных,ПутьМетодаAPI,ОбращениеКInsight",
													СтрокаТаблицыЗапросов.ИдентификаторДляФормулы,
													ТипЗапроса(СтрокаТаблицыЗапросов.Запрос),
													ШаблонЗапроса, СтруктураДанныхПолей,
													СтрокаТаблицыЗапросов.ПутьМетодаAPI,
													СтрокаТаблицыЗапросов.ОбращениеКInsight);
		//													
		НоваяСтрокаТаблицы = ТаблицаДанныхЗапросов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицы, СтруктураЗаполненияТаблицы);
		
	КонецЦикла; 
	
	ШаблонПорядкаВыполненияЗапросов = ПолучитьШаблонВыполненияЗапросов(ОбъектСсылка, ИдентификаторМетода);
	
	// TODO: Выполнение запроса к Jira/Insight после написания ядра для "общения" с Jira.
	
КонецПроцедуры

Функция ТипЗапроса(Запрос)
	Возврат Запрос.ТипЗапроса;	
КонецФункции

Функция ИнициализацияТаблицы()
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Идентификатор");
	ТаблицаДанных.Колонки.Добавить("ТипЗапроса");
	ТаблицаДанных.Колонки.Добавить("ТекстЗапроса");
	ТаблицаДанных.Колонки.Добавить("СтруктураДанных");
	ТаблицаДанных.Колонки.Добавить("ОтправкаВInsight");
	
	Возврат ТаблицаДанных;
	
КонецФункции //ИнициализацияТаблицы

Функция ПолучитьСтруктуруДанных(ТаблицаСопоставленныхДанных)
	
	СтруктураДанных = Новый Структура();
	
	Для каждого Строка Из ТаблицаСопоставленныхДанных Цикл
		СтруктураДанных.Вставить(Строка.ИмяРеквизита, "");
	КонецЦикла;	                                                    
	
	Возврат СтруктураДанных;
	
КонецФункции

Процедура СопоставитьПоляЗапроса(ТекстЗапроса, ТаблицаСопоставленияПараметров)
	
	Для каждого СтрокаТаблицы Из ТаблицаСопоставленияПараметров Цикл
		ШаблонИмениРеквизита = СтрШаблон("КАК %1", СтрокаТаблицы.СопоставленноеЗначение);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, СтрокаТаблицы.Параметр, СтрокаТаблицы.СопоставленноеЗначение);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ШаблонИмениРеквизита, СтрокаТаблицы.ИмяРеквизита);
	КонецЦикла;
	
КонецПроцедуры

Функция НазначенныеТипыЗапросовПоОбъекту(СсылкаНаОбъект, ВызываемыйМетод) Экспорт
	
	СтруктураМетаданных = Д_ИнтеграцияСJiraВызовСервера.ПолучитьСтруктуруМетаданных(СсылкаНаОбъект);
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	Д_НастройкиПорядкаВыполненияИспользуемыеЗапросы.Запрос КАК Запрос,
	|	Д_НастройкиПорядкаВыполненияИспользуемыеЗапросы.ИдентификаторДляФормулы КАК ИдентификаторДляФормулы,
	|	Д_НастройкиПорядкаВыполненияИспользуемыеЗапросы.Запрос.ПутьМетодаAPI КАК ПутьМетодаAPI,
	|	Д_НастройкиПорядкаВыполненияИспользуемыеЗапросы.Запрос.ОбращениеКInsight КАК ОбращениеКInsight
	|ИЗ
	|	Справочник.Д_НастройкиПорядкаВыполнения.ИспользуемыеЗапросы КАК Д_НастройкиПорядкаВыполненияИспользуемыеЗапросы
	|ГДЕ
	|	Д_НастройкиПорядкаВыполненияИспользуемыеЗапросы.Ссылка.ТипОбъекта = &ТипОбъекта
	|	И Д_НастройкиПорядкаВыполненияИспользуемыеЗапросы.Ссылка.ИмяОбъекта = &ИмяОбъекта
	|	И Д_НастройкиПорядкаВыполненияИспользуемыеЗапросы.Ссылка.ВызываемыйМетод = &ВызываемыйМетод
	|
	|УПОРЯДОЧИТЬ ПО
	|	Д_НастройкиПорядкаВыполненияИспользуемыеЗапросы.НомерСтроки"; 
	
	Запрос.УстановитьПараметр("ТипОбъекта", ?(СтруктураМетаданных.ТипДокумента = "Документ", Перечисления.Д_ТипыОбъектов.Документ, Перечисления.Д_ТипыОбъектов.Справочник));
	Запрос.УстановитьПараметр("ИмяОбъекта", СтруктураМетаданных.ИмяДокумента);
	Запрос.УстановитьПараметр("ВызываемыйМетод", ВызываемыйМетод);
	
	ТаблицаЗапросов = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаЗапросов.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Отправка данных не может быть выполнена по причине:
							| Не заполнена таблица используемых запросов'");
	КонецЕсли;
	
	Возврат ТаблицаЗапросов;
	
КонецФункции                

Функция ПолучитьСопоставленныеПараметры(СсылкаНаШаблон) Экспорт
	  
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	Д_НастройкиШаблоновОтправкиСопоставленныеПараметры.Параметр КАК Параметр,
	|	Д_НастройкиШаблоновОтправкиСопоставленныеПараметры.СопоставленноеЗначение КАК СопоставленноеЗначение,
	|	Д_НастройкиШаблоновОтправкиСопоставленныеПараметры.ИмяРеквизита КАК ИмяРеквизита
	|ИЗ
	|	Справочник.Д_НастройкиШаблоновОтправки.СопоставленныеПараметры КАК Д_НастройкиШаблоновОтправкиСопоставленныеПараметры
	|ГДЕ
	|	Д_НастройкиШаблоновОтправкиСопоставленныеПараметры.Ссылка = &СсылкаНаШаблон";
	Запрос.УстановитьПараметр("СсылкаНаШаблон", СсылкаНаШаблон);
	
	ТаблицаСоответствий = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаСоответствий.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Отправка данных не может быть выполнена по причине:
							| Не существует записи сопоставления параметров.'");
	КонецЕсли;
		
	Возврат ТаблицаСоответствий;                 
	
КонецФункции  

Функция ПолучитьЗапросДляОбъекта(СсылкаНаШаблон) Экспорт	
	
	ШаблонТекстаЗапроса = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Д_НастройкиШаблоновОтправки.ШаблонЗапроса КАК ШаблонЗапроса
	|ИЗ
	|	Справочник.Д_НастройкиШаблоновОтправки КАК Д_НастройкиШаблоновОтправки
	|ГДЕ
	|	Д_НастройкиШаблоновОтправки.Ссылка = &СсылкаНаШаблон";
	Запрос.УстановитьПараметр("СсылкаНаШаблон", СсылкаНаШаблон);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ШаблонТекстаЗапроса = Выборка.ШаблонЗапроса;
	КонецЕсли;
	
	Возврат ШаблонТекстаЗапроса;
	
КонецФункции

Функция ПолучитьШаблонВыполненияЗапросов(СсылкаНаОбъект, ВызываемыйМетод) Экспорт
	
	СтруктураМетаданных = Д_ИнтеграцияСJiraВызовСервера.ПолучитьСтруктуруМетаданных(СсылкаНаОбъект);
	ШаблонВыполненияЗапроса = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Д_НастройкиПорядкаВыполнения.ШаблонВыполнения КАК ШаблонВыполнения
	|ИЗ
	|	Справочник.Д_НастройкиПорядкаВыполнения КАК Д_НастройкиПорядкаВыполнения
	|ГДЕ
	|	Д_НастройкиПорядкаВыполнения.ТипОбъекта = &ТипОбъекта
	|	И Д_НастройкиПорядкаВыполнения.ИмяОбъекта = &ИмяОбъекта
	|	И Д_НастройкиПорядкаВыполнения.ВызываемыйМетод = &ВызываемыйМетод";
	
	Запрос.УстановитьПараметр("ТипОбъекта", ?(СтруктураМетаданных.ТипДокумента = "Документ", Перечисления.Д_ТипыОбъектов.Документ, Перечисления.Д_ТипыОбъектов.Справочник));
	Запрос.УстановитьПараметр("ИмяОбъекта", СтруктураМетаданных.ИмяДокумента);
	Запрос.УстановитьПараметр("ВызываемыйМетод", ВызываемыйМетод);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ШаблонВыполненияЗапроса = Выборка.ШаблонВыполнения;
	КонецЕсли;
		
	Возврат ШаблонВыполненияЗапроса;
	
КонецФункции

Функция ВыполнитьGETЗапрос(URL, ВернутьДвоичныеДанные = Ложь)  Экспорт
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(URL);
	Результат =  Д_ОбщегоНазначения.ЗначениеПредопределенногоПараметра("СтрокаCookieJira");
	Куки = Результат.СтрокаCookieJira;
	Если Не ЗначениеЗаполнено(Куки) Тогда
		Куки = Авторизоваться();
	КонецЕсли;
	
КонецФункции

Функция ВыполнитьPOSTЗапрос(URL, ДанныеJSON, ЭтоЗапросАвторизации = Ложь) Экспорт
	                                        
	Куки = Д_ОбщегоНазначения.ПолучитьЗначениеПараметраСеанса("СтрокаCookieJira");
	Куки = Куки.СтрокаCookieJira;
	
	Если Не ЗначениеЗаполнено(Куки) И НЕ ЭтоЗапросАвторизации Тогда
		Куки = Авторизоваться();
	КонецЕсли;
	
	ЗначенияРеквизитов = Новый Структура();
	ЗначенияРеквизитов.Вставить("ИспользуемыйЛогинJira", "Пользователь");
	ЗначенияРеквизитов.Вставить("ИспользуемыйПарольJira", "Пароль");
	
	ДанныеАвторизации = Д_ОбщегоНазначенияКлиентСервер.ЗначенияПредопределенныхПараметров(ЗначенияРеквизитов);
	
КонецФункции

Процедура ВыполнитьPUTЗапрос(URL, ДанныеJSON) Экспорт
	
	Куки = Д_ОбщегоНазначения.ПолучитьЗначениеПараметраСеанса("СтрокаCookieJira");
	Куки = Куки.СтрокаCookieJira;
	
	Если Не ЗначениеЗаполнено(Куки) Тогда
		Куки = Авторизоваться();
	КонецЕсли;
	
КонецПроцедуры

Функция Авторизоваться() Экспорт
	
	ЗначенияРеквизитов = Новый Структура();
	ЗначенияРеквизитов.Вставить("ИспользуемыйЛогинJira", "Пользователь");
	ЗначенияРеквизитов.Вставить("ИспользуемыйПарольJira", "Пароль");
	
	ДанныеАвторизации = Д_ОбщегоНазначения.ЗначенияПредопределенныхПараметров(ЗначенияРеквизитов);
	Если НЕ ЗначениеЗаполнено(ДанныеАвторизации.Пользователь) ИЛИ НЕ ЗначениеЗаполнено(ДанныеАвторизации.Пароль) Тогда
		ВызватьИсключение "При авторизации произошли ошибки";	
	КонецЕсли;
		
	СтруктураТела = Новый Структура("username, password", ДанныеАвторизации.Пользователь, ДанныеАвторизации.Пароль);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, " ", Истина);  
	ЗаписьJSON.УстановитьСтроку(ПараметрыJSON);
	ЗаписатьJSON(ЗаписьJSON, СтруктураТела);           
	ДанныеJSON = ЗаписьJSON.Закрыть();
	
	JIRA_URL = Д_ОбщегоНазначения.ЗначениеПредопределенногоПараметра("ШаблонАдресаJira");
	URL = СтрШаблон("%1/rest/auth/1/session", JIRA_URL.ШаблонАдресаJira);

	//Куки = Ответ.Заголовки["Set-Cookie"];
	//Д_ОбщегоНазначенияВызовСервера.ЗаписатьЗначениеПараметра("СтрокаCookieJira", Куки);
	//
	//Возврат Куки;
	
КонецФункции