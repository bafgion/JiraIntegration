Функция ПолучитьСтруктуруМетаданных(ДокументСправочникСсылка) Экспорт
	
	СтруктураМетаданных = Новый Структура();
	
	ТипЗначения = ТипЗнч(ДокументСправочникСсылка);
	ИмяОбъекта = Метаданные.НайтиПоТипу(ТипЗначения).ПолноеИмя();
	МассивРазделения = СтрРазделить(ИмяОбъекта, ".");
	
	СтруктураМетаданных.Вставить("ТипДокумента", МассивРазделения[0]);
	СтруктураМетаданных.Вставить("ИмяДокумента", МассивРазделения[1]);
		
	Возврат СтруктураМетаданных;
	
КонецФункции

Функция ПолучитьКоличествоПараметровДляСопоставления(ШаблонJSON) Экспорт
	
	ИндексПараметра = 0;
	ПродолжатьПоиск = Истина;
	
	Пока ПродолжатьПоиск Цикл
		
		ИндексПараметра = ИндексПараметра + 1;
		ИмяПараметра = "#Параметр" + Строка(ИндексПараметра) + "#";
		
		Если СтрНайти(ШаблонJSON, ИмяПараметра) = 0 Тогда
			ПродолжатьПоиск = Ложь;
			ИндексПараметра = ИндексПараметра - 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИндексПараметра;
	
КонецФункции

Функция СформироватьСтандартныйШаблонЗапроса(ШаблонJSON, ДанныеОбъекта) Экспорт
	
	КоличествоСтрок = ПолучитьКоличествоПараметровДляСопоставления(ШаблонJSON);
	ТекстЗапроса = "ВЫБРАТЬ";
	
	Для Счетчик = 1 По КоличествоСтрок Цикл
		ИмяПараметра = "#Параметр" + Строка(Счетчик) + "#";
		ШаблонСтрокиЗапроса = ?(Счетчик = КоличествоСтрок, " 	%1.%2 КАК %2", " 	%1.%2 КАК %2,");
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + СтрШаблон(ШаблонСтрокиЗапроса, ДанныеОбъекта.ИмяОбъекта, ИмяПараметра);
	КонецЦикла;
	
	ШаблонОкончанияЗапроса = "ИЗ
	|	%1.%2 КАК %2
	|ГДЕ
	|	%2.Ссылка = &Ссылка";
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + СтрШаблон(ШаблонОкончанияЗапроса, ДанныеОбъекта.ТипОбъекта, ДанныеОбъекта.ИмяОбъекта);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция НазначенныеТипыЗапросовПоОбъекту(СсылкаНаОбъект, ВызываемыйМетод) Экспорт
	
	СтруктураМетаданных = Д_ИнтеграцияСJiraВызовСервера.ПолучитьСтруктуруМетаданных(СсылкаНаОбъект);
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	Д_НастройкиПорядкаВыполненияИспользуемыеЗапросы.Запрос КАК Запрос,
	|	Д_НастройкиПорядкаВыполненияИспользуемыеЗапросы.ИдентификаторДляФормулы КАК ИдентификаторДляФормулы,
	|	Д_НастройкиПорядкаВыполненияИспользуемыеЗапросы.Запрос.ПутьМетодаAPI КАК ПутьМетодаAPI,
	|	Д_НастройкиПорядкаВыполненияИспользуемыеЗапросы.Запрос.ОбращениеКInsight КАК ОбращениеКInsight
	|ИЗ
	|	Справочник.Д_НастройкиПорядкаВыполнения.ИспользуемыеЗапросы КАК Д_НастройкиПорядкаВыполненияИспользуемыеЗапросы
	|ГДЕ
	|	Д_НастройкиПорядкаВыполненияИспользуемыеЗапросы.Ссылка.ТипОбъекта = &ТипОбъекта
	|	И Д_НастройкиПорядкаВыполненияИспользуемыеЗапросы.Ссылка.ИмяОбъекта = &ИмяОбъекта
	|	И Д_НастройкиПорядкаВыполненияИспользуемыеЗапросы.Ссылка.ВызываемыйМетод = &ВызываемыйМетод
	|
	|УПОРЯДОЧИТЬ ПО
	|	Д_НастройкиПорядкаВыполненияИспользуемыеЗапросы.НомерСтроки"; 
	
	Запрос.УстановитьПараметр("ТипОбъекта", ?(СтруктураМетаданных.ТипДокумента = "Документ", Перечисления.Д_ТипыОбъектов.Документ, Перечисления.Д_ТипыОбъектов.Справочник));
	Запрос.УстановитьПараметр("ИмяОбъекта", СтруктураМетаданных.ИмяДокумента);
	Запрос.УстановитьПараметр("ВызываемыйМетод", ВызываемыйМетод);
	
	ТаблицаЗапросов = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаЗапросов.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Отправка данных не может быть выполнена по причине:
							| Не заполнена таблица используемых запросов'");
	КонецЕсли;
	
	Возврат ТаблицаЗапросов;
	
КонецФункции                

Функция ПолучитьСопоставленныеПараметры(СсылкаНаШаблон) Экспорт
	  
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	Д_НастройкиШаблоновОтправкиСопоставленныеПараметры.Параметр КАК Параметр,
	|	Д_НастройкиШаблоновОтправкиСопоставленныеПараметры.СопоставленноеЗначение КАК СопоставленноеЗначение,
	|	Д_НастройкиШаблоновОтправкиСопоставленныеПараметры.ИмяРеквизита КАК ИмяРеквизита
	|ИЗ
	|	Справочник.Д_НастройкиШаблоновОтправки.СопоставленныеПараметры КАК Д_НастройкиШаблоновОтправкиСопоставленныеПараметры
	|ГДЕ
	|	Д_НастройкиШаблоновОтправкиСопоставленныеПараметры.Ссылка = &СсылкаНаШаблон";
	Запрос.УстановитьПараметр("СсылкаНаШаблон", СсылкаНаШаблон);
	
	ТаблицаСоответствий = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаСоответствий.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Отправка данных не может быть выполнена по причине:
							| Не существует записи сопоставления параметров.'");
	КонецЕсли;
		
	Возврат ТаблицаСоответствий;                 
	
КонецФункции  

Функция ПолучитьЗапросДляОбъекта(СсылкаНаШаблон) Экспорт	
	
	ШаблонТекстаЗапроса = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Д_НастройкиШаблоновОтправки.ШаблонЗапроса КАК ШаблонЗапроса
	|ИЗ
	|	Справочник.Д_НастройкиШаблоновОтправки КАК Д_НастройкиШаблоновОтправки
	|ГДЕ
	|	Д_НастройкиШаблоновОтправки.Ссылка = &СсылкаНаШаблон";
	Запрос.УстановитьПараметр("СсылкаНаШаблон", СсылкаНаШаблон);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ШаблонТекстаЗапроса = Выборка.ШаблонЗапроса;
	КонецЕсли;
	
	Возврат ШаблонТекстаЗапроса;
	
КонецФункции

Функция ПолучитьШаблонВыполненияЗапросов(СсылкаНаОбъект, ВызываемыйМетод) Экспорт
	
	СтруктураМетаданных = Д_ИнтеграцияСJiraВызовСервера.ПолучитьСтруктуруМетаданных(СсылкаНаОбъект);
	ШаблонВыполненияЗапроса = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Д_НастройкиПорядкаВыполнения.ШаблонВыполнения КАК ШаблонВыполнения
	|ИЗ
	|	Справочник.Д_НастройкиПорядкаВыполнения КАК Д_НастройкиПорядкаВыполнения
	|ГДЕ
	|	Д_НастройкиПорядкаВыполнения.ТипОбъекта = &ТипОбъекта
	|	И Д_НастройкиПорядкаВыполнения.ИмяОбъекта = &ИмяОбъекта
	|	И Д_НастройкиПорядкаВыполнения.ВызываемыйМетод = &ВызываемыйМетод";
	
	Запрос.УстановитьПараметр("ТипОбъекта", ?(СтруктураМетаданных.ТипДокумента = "Документ", Перечисления.Д_ТипыОбъектов.Документ, Перечисления.Д_ТипыОбъектов.Справочник));
	Запрос.УстановитьПараметр("ИмяОбъекта", СтруктураМетаданных.ИмяДокумента);
	Запрос.УстановитьПараметр("ВызываемыйМетод", ВызываемыйМетод);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ШаблонВыполненияЗапроса = Выборка.ШаблонВыполнения;
	КонецЕсли;
		
	Возврат ШаблонВыполненияЗапроса;
	
КонецФункции

Процедура АнализФайлаОтвета(АдресХранилища, ПутьНаСервере, КодСостояния) Экспорт 
	
	ФайлОтвет = ?(ПутьНаСервере = Неопределено, ПолучитьИмяВременногоФайла(), ПутьНаСервере);
	Попытка
		Если АдресХранилища <> Неопределено Тогда
			ДД = ПолучитьИзВременногоХранилища(АдресХранилища);
			ДД.Записать(ФайлОтвет);
		КонецЕсли;
		
		ТекстовыйДокумент = Новый ТекстовыйДокумент();
		ТекстовыйДокумент.Прочитать(ФайлОтвет, КодировкаТекста.UTF8);
		Тело = ТекстовыйДокумент.ПолучитьТекст(); 
		Если Не ЗначениеЗаполнено(Тело) Тогда
			ВызватьИсключение СтрШаблон("Код ответа ""%1"". Не удалось определить ошибку, файл ответа пуст.", КодСостояния);	
		КонецЕсли;
		
		ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеJSON.УстановитьСтроку(Тело);
		ОтветОбъект = ПрочитатьJSON(ЧтениеJSON, Истина);
		ЧтениеJSON.Закрыть();
		
		МассивОшибок = ОтветОбъект["errorMessages"];
		Если МассивОшибок <> Неопределено Тогда
			ВызватьИсключение СтрШаблон("Код ответа ""%1"". Ошибки:
			|%2", КодСостояния, СтрСоединить(МассивОшибок, Символы.ПС));
		Иначе
			ВызватьИсключение СтрШаблон("Код ответа ""%1"". Не удалось определить ошибку.", КодСостояния);
		КонецЕсли;
		
		Д_ОбщегоНазначенияКлиентСервер.УдалитьФайлыКлиентСервер(ФайлОтвет);
	Исключение
		
		Д_ОбщегоНазначенияКлиентСервер.УдалитьФайлыКлиентСервер(ФайлОтвет);
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

Функция ВыполнитьGETЗапрос(URL, ВернутьДвоичныеДанные = Ложь)  Экспорт
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(URL);
	Результат =  Д_ОбщегоНазначения.ЗначениеПредопределенногоПараметра("СтрокаCookieJira");
	Куки = Результат.СтрокаCookieJira;
	Если Не ЗначениеЗаполнено(Куки) Тогда
		Куки = Д_ИнтеграцияСJiraКлиентСервер.Авторизоваться();
	КонецЕсли;
	
	Заголовки = Д_ИнтеграцияСJiraКлиентСервер.ПолучитьЗаголовки();
	Заголовки.Вставить("Cookie", Куки);
	
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL();	
	
	Тело = "";
	ДД = Неопределено;
	ФайлОтвет = ПолучитьИмяВременногоФайла();
	
	Попытка                                                             
		
		HTTPСоединение = Новый HTTPСоединение(СтруктураURI.ИмяСервера,,,,,, ssl);
		HTTPЗапрос = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере, Заголовки);
		Ответ = HTTPСоединение.Получить(HTTPЗапрос, ФайлОтвет);  
		
		//
		Если Д_ОбщегоНазначенияКлиентСервер.ОкруглитьДоСотых(Ответ.КодСостояния) = 200 Тогда 
			Если Не ВернутьДвоичныеДанные Тогда
				HTMLФайл = Новый ТекстовыйДокумент();
				HTMLФайл.Прочитать(ФайлОтвет, КодировкаТекста.UTF8);			
				Тело = HTMLФайл.ПолучитьТекст(); 
			Иначе
				ДД = Новый ДвоичныеДанные(ФайлОтвет);
			КонецЕсли;
		Иначе
			АнализФайлаОтвета(Неопределено, ФайлОтвет, Ответ.КодСостояния);
		КонецЕсли;
		
		Д_ОбщегоНазначенияКлиентСервер.УдалитьФайлыКлиентСервер(ФайлОтвет);
		
	Исключение
		
		Д_ОбщегоНазначенияКлиентСервер.УдалитьФайлыКлиентСервер(ФайлОтвет);
		ВызватьИсключение;
		
	КонецПопытки;
	
	Возврат ?(ВернутьДвоичныеДанные, ДД, Тело);
	
КонецФункции

Функция ВыполнитьPOSTЗапрос(URL, ДанныеJSON, ЭтоЗапросАвторизации = Ложь) Экспорт
	                                        
	Куки = Д_ОбщегоНазначения.ПолучитьЗначениеПараметраСеанса("СтрокаCookieJira");
	Куки = Куки.СтрокаCookieJira;
	
	Если Не ЗначениеЗаполнено(Куки) И НЕ ЭтоЗапросАвторизации Тогда
		Куки = Д_ИнтеграцияСJiraКлиентСервер.Авторизоваться();
	КонецЕсли;
	
	Заголовки = Д_ИнтеграцияСJiraКлиентСервер.ПолучитьЗаголовки();
	Заголовки.Вставить("Cookie", Куки); 
	
	ЗначенияРеквизитов = Новый Структура();
	ЗначенияРеквизитов.Вставить("ИспользуемыйЛогинJira", "Пользователь");
	ЗначенияРеквизитов.Вставить("ИспользуемыйПарольJira", "Пароль");
	
	ДанныеАвторизации = Д_ОбщегоНазначенияКлиентСервер.ЗначенияПредопределенныхПараметров(ЗначенияРеквизитов);
	
	ДвоичныеДанные = ПолучитьДвоичныеДанныеИзСтроки(СтрШаблон("%1:%2", ДанныеАвторизации.Пользователь, ДанныеАвторизации.Пароль) ,КодировкаТекста.UTF8);
	КлючАвторизации = ПолучитьBase64СтрокуИзДвоичныхДанных(ДвоичныеДанные);
	
	Заголовки.Вставить("Authorization", СтрШаблон("Basic %1",КлючАвторизации));
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(URL);
	
	Прокси = Новый ИнтернетПрокси(Истина);
	ssl = Новый ЗащищенноеСоединениеOpenSSL();
	
	HTTPСоединение = Новый HTTPСоединение(СтруктураURI.Хост,СтруктураURI.Порт,,,,, ssl);
	HTTPЗапрос = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере, Заголовки);      
	HTTPЗапрос.УстановитьТелоИзСтроки(ДанныеJSON, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	ФайлОтвет = ПолучитьИмяВременногоФайла();
	
	Попытка
		
		Ответ = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос, ФайлОтвет);
		
		Если Д_ОбщегоНазначенияКлиентСервер.ОкруглитьДоСотых(Ответ.КодСостояния) <> 200 Тогда
			Д_ОбщегоНазначенияКлиентСервер.АнализФайлаОтвета(ФайлОтвет, Ответ.КодСостояния);
		КонецЕсли;	
		
		Д_ОбщегоНазначенияКлиентСервер.УдалитьФайлыКлиентСервер(ФайлОтвет);
		Возврат Ответ;
		
	Исключение
		Д_ОбщегоНазначенияКлиентСервер.УдалитьФайлыКлиентСервер(ФайлОтвет);
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецФункции

Процедура ВыполнитьPUTЗапрос(URL, ДанныеJSON) Экспорт
	
	Куки = Д_ОбщегоНазначения.ПолучитьЗначениеПараметраСеанса("СтрокаCookieJira");
	Куки = Куки.СтрокаCookieJira;
	
	Если Не ЗначениеЗаполнено(Куки) Тогда
		Куки = Д_ИнтеграцияСJiraКлиентСервер.Авторизоваться();
	КонецЕсли;
	
	Заголовки = Д_ИнтеграцияСJiraКлиентСервер.ПолучитьЗаголовки();
	Заголовки.Вставить("Cookie", Куки); 
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(URL);
	
	Прокси = Новый ИнтернетПрокси(Истина);
	ssl = Новый ЗащищенноеСоединениеOpenSSL();
	
	HTTPСоединение = Новый HTTPСоединение(СтруктураURI.Хост,,,,,, ssl);
	HTTPЗапрос = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере, Заголовки);      
	HTTPЗапрос.УстановитьТелоИзСтроки(ДанныеJSON, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	ФайлОтвет = ПолучитьИмяВременногоФайла();
	
	Попытка
		
		Ответ = HTTPСоединение.ВызватьHTTPМетод("PUT", HTTPЗапрос, ФайлОтвет); 
		
		Если Д_ОбщегоНазначенияКлиентСервер.ОкруглитьДоСотых(Ответ.КодСостояния) <> 200 Тогда
			Д_ОбщегоНазначенияКлиентСервер.АнализФайлаОтвета(ФайлОтвет, Ответ.КодСостояния);
		КонецЕсли;	
		
		Д_ОбщегоНазначенияКлиентСервер.УдалитьФайлыКлиентСервер(ФайлОтвет);
		
	Исключение
		
		Д_ОбщегоНазначенияКлиентСервер.УдалитьФайлыКлиентСервер(ФайлОтвет);
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры
